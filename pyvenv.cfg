import numpy as np
import tensorflow as tf
import pygame as pg
import random as rn
import sys
#FUNCTION TO FIND THE X,Y COORDINATES FOR A GIVEN STATE
def find_cor(state):
    if state == 0:
        x_cor = 52
        y_cor = 202
    if state == 1:
        x_cor = 52 +50
        y_cor = 202
    if state == 2:
        x_cor = 52 +50
        y_cor = 202 -50
    if state == 3:
        x_cor = 52 +50
        y_cor = 202 -2*50
    if state == 4:
        x_cor = 52 +2*50
        y_cor = 202 -2*50
    if state == 5:
        x_cor = 52 +3*50
        y_cor = 202 -2*50
    if state == 6:
        x_cor = 52 +3*50
        y_cor = 202 -50
    if state == 7:
        x_cor = 52 +3*50
        y_cor = 202
    if state == 8:
        x_cor = 52 +2*50
        y_cor = 202
    if state == 9:
        x_cor = 52 +4*50
        y_cor = 202
    return x_cor,y_cor




WHITE = (255,255,255)
BLACK = (0,0,0)
RED = (255,0,0)
GREEN = (0,255,0)
scrpxl_x = 350
scrpxl_y = 300
delay = 150
init_player_xpos = 52
init_player_ypos = 202

state = 0
#CREATING THE REWARD MATRIX
#innitializing all the values R(s,s*) to -1(as -1 defines all those states for which the s to  s* not valid)
#s is the previous state and s* is the next state from there possible.
R = np.zeros((10,10))
for i in range(10):
    for j in range(10):
        R[i][j] = -1
#these are the rewards for possible s to s*
#0 is for all possible states 
#+100 is given for that S to S* where s* is the success
R[0][1] = R[1][8] = R[1][2] = R[1][0] = 0
R[2][1] = R[2][3] = R[3][2] = R[3][4] = 0
R[4][3] = R[4][5] = R[5][4] = R[5][6] = 0
R[6][5] = R[6][7] = R[7][8] = 0
R[8][1] = R[8][7] = R[7][6] = R[9][7] = 0
R[7][9] = R[9][9] = 100
#CREATING AND ZERO INNITIALIZING THE Q_MATRIX
Q = np.zeros((10,10))
#BELLMAN'S EQUATION: Q[present_state][next_state] = R[present_state][next_satate] + gamma * max(Q[next_states][next_of_states])
gamma = 0.8

def gameplay():
    global R
    global Q
    global state
    global gamma
    previous_state = 0
    class player:
        def __init__(self,x,y,h,w):
            self.x_cor = x
            self.y_cor = y
            self.height = h
            self.width = w
    
    p = player(init_player_xpos,init_player_ypos,47,47)
    pg.init()
    gamescreen = pg.display.set_mode((scrpxl_x,scrpxl_y))
    playing = True,
    while(playing):
        previous_state = state
        pg.time.delay(delay)
        for event in pg.event.get():
            if event.type == pg.QUIT or (event.type == pg.KEYDOWN and event.key == pg.K_ESCAPE):
                playing = False
        keys = pg.key.get_pressed()
        maxofstate = 0#it the maximum possible value for the Q matrix for one state among all the possible next state transitions 
        next_index = 0#next_index represints the index value (the s*) for whitch Q(s,s*) is maximum
        #searching the index for the maximum value in a row: 
        for index in range(10):
            if maxofstate <= Q[state][index]:
                maxofstate = Q[state][index]
                next_index = index
        #if the maximum value for Q matrix is greater than zero(learned) then the game will use the action most appropriate
        #else it will choose a random
        if maxofstate <= 0:
            action = rn.randint(1,4)
            if action == 1:
                if (p.y_cor == 202 and p.x_cor <= 52 + (3*50)) or (p.y_cor == 102 and p.x_cor <= 52 + (2*50)):
                    p.x_cor += 50
            if action == 2:
                if (p.y_cor == 202 and p.x_cor >= 52 + 50) or (p.y_cor == 102 and p.x_cor >= 52 + 100):
                    p.x_cor -= 50
            if action == 3:
                if (p.x_cor == 52 + 50 and p.y_cor >= 202 - 50) or (p.x_cor == 52 + 3*50 and p.y_cor >= 202 - 50):
                    p.y_cor -= 50
            if action == 4:
                if (p.x_cor == 52 + 50 and p.y_cor <= 202 - 50) or (p.x_cor == 52 + 3 * 50 and p.y_cor <= 202 - 50):
                    p.y_cor += 50
        else:
            p.x_cor,p.y_cor  = find_cor(next_index)
            


        if p.x_cor == 52 and p.y_cor == 202:
            state = 0
        if p.x_cor == 52 +50 and p.y_cor == 202:
            state = 1
        if p.x_cor == 52 +50 and p.y_cor == 202 -50:
            state = 2
        if p.x_cor == 52 +50 and p.y_cor == 202 -2*50:
            state = 3
        if p.x_cor == 52 +2*50 and p.y_cor == 202 -2*50:
            state = 4
        if p.x_cor == 52 +3*50 and p.y_cor == 202 -2*50:
            state = 5
        if p.x_cor == 52 +3*50 and p.y_cor == 202 -50:
            state = 6
        if p.x_cor == 52 +3*50 and p.y_cor == 202:
            state = 7
        if p.x_cor == 52 +2*50 and p.y_cor == 202:
            state = 8
        if p.x_cor == 52 +4*50 and p.y_cor == 202:
            state = 9
    
        gamescreen.fill(WHITE)
    
        pg.draw.rect(gamescreen, BLACK, [50, 200, 50, 50], 3)
        pg.draw.rect(gamescreen, BLACK, [100, 200, 50, 50], 3)
        pg.draw.rect(gamescreen, BLACK, [150, 200, 50, 50], 3)
        pg.draw.rect(gamescreen, BLACK, [200, 200, 50, 50], 3)
        pg.draw.rect(gamescreen, GREEN, [250, 200, 50, 50], 0)
        pg.draw.rect(gamescreen, BLACK, [100, 150, 50, 50], 3)
        pg.draw.rect(gamescreen, BLACK, [100, 100, 50, 50], 3)
        pg.draw.rect(gamescreen, BLACK, [150, 100, 50, 50], 3)
        pg.draw.rect(gamescreen, BLACK, [200, 100, 50, 50], 3)
        pg.draw.rect(gamescreen, BLACK, [200, 150, 50, 50], 3)
    
        pg.draw.rect(gamescreen, BLACK, [150, 150, 50, 50], 0)
    
        pg.draw.rect(gamescreen, RED, [p.x_cor, p.y_cor, p.height, p.width], 0)
    
        pg.display.update()
        max = 0
        if not previous_state == state:
            for i in range(10):
                if not (R[state][i] == -1 and Q[state][i] < max):
                    max = Q[state][i]
            Q[previous_state][state] = round(R[previous_state][state] + gamma *max)
        if state == 9:
            playing = False
        #print(Q[previous_state][state])
    pg.quit()



for i in range(10):
    gameplay()
print(Q)
sys.exit()